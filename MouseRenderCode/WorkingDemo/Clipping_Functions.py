import vtk

def make_clipper(plane,normals):
    """
    Returns a clipper filter, of type vtk.vtkClipPolyData()
    takes as input:
      * the cut plane, of type vtk.vtkPlane()
      * The normals to the polydata, of type  vtk.vtkPolyDataNormals()
    """
    # We clip with an implicit function. Here we use a plane positioned near
    # the center of the cow model and oriented at an arbitrary angle.

    # vtkClipPolyData requires an implicit function to define what it is to
    # clip with. Any implicit function, including complex boolean combinations
    # can be used. Notice that we can specify the value of the implicit function
    # with the SetValue method.
    clipper = vtk.vtkClipPolyData()    #clip filter ?
    clipper.SetInputConnection(normals.GetOutputPort())
    clipper.SetClipFunction(plane)
    clipper.GenerateClipScalarsOn()
    clipper.GenerateClippedOutputOn()
    clipper.SetValue(0.5)

    return clipper

def make_actors(plane,clipper,normals,color):
    """ Creates three actors for a given volume: clipActor,cutActor,restActor
    takes as input plane and normal (same as parameters for  make_clipper) 
    and clipper (generated by  make_clipper)
    """
    clipMapper = vtk.vtkPolyDataMapper()   # Mapper
    clipMapper.SetInputConnection(clipper.GetOutputPort())
    clipMapper.ScalarVisibilityOff()

    #backProp = vtk.vtkProperty()
    #backProp.SetDiffuseColor(tomato)

    clipActor = vtk.vtkActor()      # Actor
    clipActor.SetMapper(clipMapper)
    clipActor.GetProperty().SetColor(color)
    clipActor.GetProperty().EdgeVisibilityOff()
    clipActor.GetProperty().SetOpacity(0.5)
    clipActor.GetProperty().SetInterpolationToGouraud()

    #clipActor.SetBackfaceProperty(backProp)

    # Here we are cutting the cow. Cutting creates lines where the cut
    # function intersects the model. (Clipping removes a portion of the
    # model but the dimension of the data does not change.)
    #
    # The reason we are cutting is to generate a closed polygon at the
    # boundary of the clipping process. The cutter generates line
    # segments, the stripper then puts them together into polylines. We
    # then pull a trick and define polygons using the closed line
    # segments that the stripper created.
    cutEdges = vtk.vtkCutter()
    cutEdges.SetInputConnection(normals.GetOutputPort())
    cutEdges.SetCutFunction(plane)
    cutEdges.GenerateCutScalarsOn()
    cutEdges.SetValue(0, 0.5)

    cutStrips = vtk.vtkStripper()
    cutStrips.SetInputConnection(cutEdges.GetOutputPort())
    cutStrips.Update()

    cutPoly = vtk.vtkPolyData()
    cutPoly.SetPoints(cutStrips.GetOutput().GetPoints())
    cutPoly.SetPolys(cutStrips.GetOutput().GetLines())

    # Triangle filter is robust enough to ignore the duplicate point at
    # the beginning and end of the polygons and triangulate them.
    cutTriangles = vtk.vtkTriangleFilter()
    cutTriangles.SetInputData(cutPoly)
    cutMapper = vtk.vtkPolyDataMapper()
    cutMapper.SetInputData(cutPoly)
    cutMapper.SetInputConnection(cutTriangles.GetOutputPort())
    cutActor = vtk.vtkActor()
    cutActor.SetMapper(cutMapper)
    cutActor.GetProperty().SetColor(color)

    # The clipped part of the cow is rendered wireframe.
    restMapper = vtk.vtkPolyDataMapper()
    restMapper.SetInputConnection(clipper.GetClippedOutputPort())
    restMapper.ScalarVisibilityOff()
    restActor = vtk.vtkActor()
    restActor.SetMapper(restMapper)
    restActor.GetProperty().SetColor(color)
    restActor.GetProperty().EdgeVisibilityOff()
    restActor.GetProperty().SetOpacity(0.1)
    restActor.GetProperty().SetInterpolationToGouraud()

    #restActor.GetProperty().SetRepresentationToWireframe()
    return clipActor,cutActor,restActor

